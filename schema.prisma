// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  passwordHash    String   @map("password_hash")
  firstName       String   @map("first_name")
  lastName        String   @map("last_name")
  phone           String?
  dateOfBirth     DateTime? @map("date_of_birth") @db.Date
  country         String?
  city            String?
  address         String?
  role            Role     @default(CUSTOMER)
  emailVerified   Boolean  @default(false) @map("email_verified")
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  orders          Order[]
  enrollments     Enrollment[]
  appointments    Appointment[]
  reviews         Review[]
  notifications   Notification[]
  instructor      Instructor?
  couponUsage     CouponUsage[]

  @@map("users")
}

model CertificationCategory {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  iconUrl       String?  @map("icon_url")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  certifications Certification[]

  @@map("certification_categories")
}

model Certification {
  id                    Int      @id @default(autoincrement())
  categoryId            Int?     @map("category_id")
  title                 String
  description           String?
  detailedDescription   String?  @map("detailed_description")
  price                 Decimal  @db.Decimal(10, 2)
  durationHours         Int?     @map("duration_hours")
  difficultyLevel       DifficultyLevel? @map("difficulty_level")
  language              String   @default("es")
  certificateType       CertificateType? @map("certificate_type")
  imageUrl              String?  @map("image_url")
  syllabusUrl           String?  @map("syllabus_url")
  prerequisites         String?
  learningObjectives    String?  @map("learning_objectives")
  isActive              Boolean  @default(true) @map("is_active")
  featured              Boolean  @default(false)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  category              CertificationCategory? @relation(fields: [categoryId], references: [id])
  orderItems            OrderItem[]
  enrollments           Enrollment[]
  appointments          Appointment[]
  reviews               Review[]
  instructors           CertificationInstructor[]

  @@map("certifications")
}

model Instructor {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique @map("user_id")
  bio               String?
  qualifications    String?
  experienceYears   Int?     @map("experience_years")
  specializations   String?
  profileImageUrl   String?  @map("profile_image_url")
  linkedinUrl       String?  @map("linkedin_url")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  user              User     @relation(fields: [userId], references: [id])
  appointments      Appointment[]
  certifications    CertificationInstructor[]
  availability      InstructorAvailability[]

  @@map("instructors")
}

model CertificationInstructor {
  certificationId   Int @map("certification_id")
  instructorId      Int @map("instructor_id")

  // Relations
  certification     Certification @relation(fields: [certificationId], references: [id])
  instructor        Instructor    @relation(fields: [instructorId], references: [id])

  @@id([certificationId, instructorId])
  @@map("certification_instructors")
}

model Order {
  id                    Int      @id @default(autoincrement())
  userId                Int      @map("user_id")
  orderNumber           String   @unique @map("order_number")
  totalAmount           Decimal  @map("total_amount") @db.Decimal(10, 2)
  taxAmount             Decimal  @default(0) @map("tax_amount") @db.Decimal(10, 2)
  discountAmount        Decimal  @default(0) @map("discount_amount") @db.Decimal(10, 2)
  status                OrderStatus @default(PENDING)
  paymentMethod         String?  @map("payment_method")
  paymentStatus         PaymentStatus @default(PENDING) @map("payment_status")
  paymentTransactionId  String?  @map("payment_transaction_id")
  billingAddress        String?  @map("billing_address")
  notes                 String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  user                  User     @relation(fields: [userId], references: [id])
  orderItems            OrderItem[]
  enrollments           Enrollment[]
  couponUsage           CouponUsage[]

  @@map("orders")
}

model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int      @map("order_id")
  certificationId Int      @map("certification_id")
  quantity        Int      @default(1)
  unitPrice       Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice      Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  order           Order    @relation(fields: [orderId], references: [id])
  certification   Certification @relation(fields: [certificationId], references: [id])

  @@map("order_items")
}

model Enrollment {
  id                  Int      @id @default(autoincrement())
  userId              Int      @map("user_id")
  certificationId     Int      @map("certification_id")
  orderId             Int?     @map("order_id")
  enrollmentDate      DateTime @default(now()) @map("enrollment_date")
  startDate           DateTime? @map("start_date") @db.Date
  completionDate      DateTime? @map("completion_date") @db.Date
  progressPercentage  Decimal  @default(0) @map("progress_percentage") @db.Decimal(5, 2)
  status              EnrollmentStatus @default(ENROLLED)
  certificateIssued   Boolean  @default(false) @map("certificate_issued")
  certificateUrl      String?  @map("certificate_url")
  finalScore          Decimal? @map("final_score") @db.Decimal(5, 2)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  // Relations
  user                User     @relation(fields: [userId], references: [id])
  certification       Certification @relation(fields: [certificationId], references: [id])
  order               Order?   @relation(fields: [orderId], references: [id])

  @@map("enrollments")
}

model Appointment {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  certificationId Int?     @map("certification_id")
  instructorId    Int?     @map("instructor_id")
  appointmentType AppointmentType @map("appointment_type")
  title           String
  description     String?
  scheduledDate   DateTime @map("scheduled_date") @db.Date
  scheduledTime   DateTime @map("scheduled_time") @db.Time
  durationMinutes Int      @default(60) @map("duration_minutes")
  status          AppointmentStatus @default(SCHEDULED)
  meetingUrl      String?  @map("meeting_url")
  meetingPlatform String?  @map("meeting_platform")
  notes           String?
  reminderSent    Boolean  @default(false) @map("reminder_sent")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  certification   Certification? @relation(fields: [certificationId], references: [id])
  instructor      Instructor? @relation(fields: [instructorId], references: [id])

  @@map("appointments")
}

model InstructorAvailability {
  id            Int      @id @default(autoincrement())
  instructorId  Int      @map("instructor_id")
  dayOfWeek     DayOfWeek @map("day_of_week")
  startTime     DateTime @map("start_time") @db.Time
  endTime       DateTime @map("end_time") @db.Time
  isAvailable   Boolean  @default(true) @map("is_available")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  instructor    Instructor @relation(fields: [instructorId], references: [id])

  @@map("instructor_availability")
}

model Coupon {
  id                  Int      @id @default(autoincrement())
  code                String   @unique
  description         String?
  discountType        DiscountType @map("discount_type")
  discountValue       Decimal  @map("discount_value") @db.Decimal(10, 2)
  minimumOrderAmount  Decimal  @default(0) @map("minimum_order_amount") @db.Decimal(10, 2)
  maxUses             Int?     @map("max_uses")
  currentUses         Int      @default(0) @map("current_uses")
  validFrom           DateTime? @map("valid_from") @db.Date
  validUntil          DateTime? @map("valid_until") @db.Date
  isActive            Boolean  @default(true) @map("is_active")
  createdAt           DateTime @default(now()) @map("created_at")

  // Relations
  usage               CouponUsage[]

  @@map("coupons")
}

model CouponUsage {
  id              Int      @id @default(autoincrement())
  couponId        Int      @map("coupon_id")
  orderId         Int      @map("order_id")
  userId          Int      @map("user_id")
  discountApplied Decimal  @map("discount_applied") @db.Decimal(10, 2)
  usedAt          DateTime @default(now()) @map("used_at")

  // Relations
  coupon          Coupon   @relation(fields: [couponId], references: [id])
  order           Order    @relation(fields: [orderId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("coupon_usage")
}

model Review {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  certificationId Int      @map("certification_id")
  rating          Int
  title           String?
  comment         String?
  isVerified      Boolean  @default(false) @map("is_verified")
  isApproved      Boolean  @default(false) @map("is_approved")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user            User     @relation(fields: [userId], references: [id])
  certification   Certification @relation(fields: [certificationId], references: [id])

  @@map("reviews")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  actionUrl String?  @map("action_url")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model SystemSetting {
  id           Int      @id @default(autoincrement())
  settingKey   String   @unique @map("setting_key")
  settingValue String?  @map("setting_value")
  description  String?
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("system_settings")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
  INSTRUCTOR
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CertificateType {
  COMPLETION
  ACHIEVEMENT
  PROFESSIONAL
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AppointmentType {
  CONSULTATION
  EXAM
  TUTORING
  ORIENTATION
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum NotificationType {
  ORDER
  APPOINTMENT
  CERTIFICATION
  SYSTEM
  PROMOTION
}

